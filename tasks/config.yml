---

- name: update mysql root password for all root accounts
  mysql_user:
    name=root
    host={{ item }}
    password={{ mysql_root_pass }}
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname != 'localhost' 

- name: update mysql root password for all root accounts
  mysql_user:
    name=root
    host={{ item }}
    password={{ mysql_root_pass }}
  with_items:
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname == 'localhost' 

- name: create ~/.my.cnf
  template: src=.my.cnf.j2 dest=~/.my.cnf mode=0600

- name: purge anonymous users
  mysql_user:
    name=''
    host={{ item }}
    state=absent
  with_items:
   - localhost
   - "{{ ansible_hostname }}"

- name: remove test db
  mysql_db:
    name=test
    state=absent

- name: create db
  mysql_db:
    name={{ item.name }}
    state=present
  with_items: mysql_db

- name: import schema
  mysql_db:
    name={{ item.name }}
    state=import
    target={{ item.target }}
  with_items: mysql_db_import

- name: create users
  mysql_user:
    name={{ item.name }}
    password={{ item.pass|default("") }}  
    priv={{ item.priv|default("*.*:ALL") }}
    host={{ item.host | default("localhost") }}
    state=present
  with_items: mysql_users

#- name: create replication users
#  mysql_user:
#    name={{ item.name }}
#    password={{ item.pass|default("foobar") }}  
#    priv=*.*:"REPLICATION SLAVE"
#    host="%"
#    state=present
#  with_items: mysql_repl_user
#  when: mylsq_repl_role is defined and mysql_repl_role == 'master' and 0

#- name: slave replication check
#  mysql_replication:
#    mode=getslave
#  ignore_errors: true
#  register: slave
#  when: mylsq_repl_role is defined and mysql_repl_role == 'slave' and 0

#- name: Ensure the hostname entry for master is available for the client.
#  lineinfile:
#    dest=/etc/hosts
#    regexp="{{ mysql_repl_master }}"
#    line="{{ hostvars[mysql_repl_master].ansible_default_ipv4.address + "   " + mysql_repl_master }}"
#    state=present
#  when: mylsq_repl_role is defined and slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined and 0

#- name: Get the current master servers replication status
#  mysql_replication:
#    mode=getmaster
#  delegate_to: "{{ mysql_repl_master }}"
#  register: repl_stat
#  when: mylsq_repl_role is defined and slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined and 0

#- name: Change the master in slave to start the replication
#  mysql_replication:
#    mode=changemaster
#    master_host={{ mysql_repl_master }}
#    master_log_file={{ repl_stat.File }}
#    master_log_pos={{ repl_stat.Position }}
#    master_user={{ mysql_repl_user[0].name }}
#    master_password={{ mysql_repl_user[0].pass }}
#  when: mylsq_repl_role is defined and slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined and 0

