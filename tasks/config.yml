---

- name: update mysql root password
  mysql_user:
    name=root
    host={{ item }}
    password={{ mysql_root_pass }}
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname != 'localhost' 

- name: update mysql root password
  mysql_user:
    name=root
    host={{ item }}
    password={{ mysql_root_pass }}
  with_items:
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname == 'localhost' 

- name: create ~/.my.cnf
  template: src=.my.cnf.j2 dest=~/.my.cnf mode=0600

- name: /etc/my.cnf
  template:
    src: "my-RedHat-6.cnf.j2"
    dest: "/etc/my.cnf"
    mode: "u=rw,g=r,o=r"

- name: purge anonymous users
  mysql_user:
    name=''
    host={{ item }}
    state=absent
  with_items:
   - localhost
   - "{{ ansible_hostname }}"

- name: remove test db
  mysql_db:
    name=test
    state=absent

- name: create db
  mysql_db:
    name={{ item.name }}
    state=present
  with_items: "{{mysql_db}}"

- name: import schema
  mysql_db:
    name={{ item.name }}
    state=import
    target={{ item.target }}
  with_items: "{{mysql_db_import}}"

- name: create users
  mysql_user:
    name={{ item.name }}
    password={{ item.pass|default("") }}  
    priv={{ item.priv|default("*.*:ALL") }}
    host={{ item.host | default("localhost") }}
    state=present
  with_items: "{{mysql_users}}"

- name: create replication users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.pass|default('foobar') }}"
    priv: "*.*:REPLICATION SLAVE"
    host: "%"
    state: present
  with_items: "{{mysql_replication_user}}"
  when: mysql_replication and mysql_replication_master != ansible_hostname

- name: slave replication check
  mysql_replication:
    mode: getslave
  ignore_errors: true
  register: slave
  when: mysql_replication and mysql_replication_master != ansible_hostname

#- name: master entry in /etc/hosts
#  lineinfile:
#    dest: "/etc/hosts"
#    regexp: "{{ mysql_replication_master }}"
#    line: "{{ hostvars[mysql_replication_master].ansible_default_ipv4.address + '   ' + mysql_replication_master }}"
#  when: mysql_replication defined and slave|failed and mysql_replication_master != ansible_hostname

- debug: var=slave

- name: get master replication status
  mysql_replication:
    mode: getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: rep_stat
  when: slave|failed

- debug: var=rep_stat
  when: rep_stat is defined 

- name: update slave replication
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_log_file: "{{ repl_stat.File }}"
    master_log_pos: "{{ repl_stat.Position }}"
    master_user: "{{ mysql_repl_user[0].name }}"
    master_password: "{{ mysql_repl_user[0].pass }}"
  when: mysql_replication and slave|failed and mysql_replication_master != ansible_hostname

- name: install certificate content
  copy:
    content: "{{item.content}}"
    dest: "/etc/pki/tls/{{item.type}}/{{item.filename}}"
    owner: "{{mysql_owner}}"
    group: "{{mysql_group}}"
    mode: "{{item.mode|default('0640')}}"
  with_items: "{{mysql_certs}}"
  when: item.content is defined and item.cn is defined and (item.cn == '*' or item.cn == ansible_hostname)
  notify: svc restart mysqld

- name: install certificate file
  copy:
    src: "{{item.file}}"
    dest: "/etc/pki/tls/{{item.type}}/{{item.filename}}"
    owner: "{{mysql_owner}}"
    group: "{{mysql_group}}"
    mode: "{{item.mode|default('0640')}}"
  with_items: "{{mysql_certs}}"
  when: item.file is defined and item.cn is defined and (item.cn == '*' or item.cn == ansible_hostname)
  notify: svc restart mysqld

